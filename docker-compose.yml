version: "3.8"


services:
  postgres_db:
    container_name: postgres_database
    image: 'postgres'
    expose:
      - "5432"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_MULTIPLE_DATABASES: account,funds
    volumes:
      - ./pg_init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - postgres_db

  account_prisma_migration:
    image: docker.io/damienbernard42/gomicroservices_account_prisma_migrations
    build:
      context: account
      dockerfile: build/Dockerfile
      target: builder
    command: "go run github.com/prisma/prisma-client-go db push --schema infra/database/schema.prisma --skip-generate"
    depends_on:
      - postgres_db
    environment:
      DATABASE_URL: "${ACCOUNT_POSTGRES_URL}"
    networks:
      - postgres_db

  account:
    image: docker.io/damienbernard42/gomicroservices_account
    container_name: account_service

    depends_on:
      - postgres_db
      - account_prisma_migration
    # Build Default Dockerfile in "account" directory.
    build:
      context: account
      dockerfile: build/Dockerfile
      target: runner
    volumes:
      # Caching go modules for faster builds.
      - account_go-modules:/go
    restart: always

    environment:
#      # Port on which backend is running
      DATABASE_URL: "${ACCOUNT_POSTGRES_URL}"
      API_KEY: "${API_KEY}"
      HTTP_PORT: "${ACCOUNT_HTTP_PORT}"
      CONF_PATH: "${ACCOUNT_CONF_PATH}"
      LOG_FORMATTER: "${ACCOUNT_LOG_FORMATTER}"
      BIN_ARGS: "${ACCOUNT_LOG_FORMATTER}"
      DEBUG_MODE: ${DEBUG_MODE}
      AUTH_URL: "auth:7003"
      BALANCE_URL: "balance:7004"

    # Port
    ports:
      - "7500:7500"

    networks:
      - auth
      - account
      - postgres_db

  ads:
    image: docker.io/damienbernard42/gomicroservices_ads
    container_name: ads_service
    build:
      context: ads
      dockerfile: build/Dockerfile
      target: runner
    volumes:
      - ads_go-modules:/go
    restart: always
    environment:
      CONF_PATH: "${ADS_CONF_PATH}"
    ports:
      - "7501:7501"
    networks:
      - ads
      - account

  swagger-ads:
    container_name: swagger_ui_ads
    image: swaggerapi/swagger-ui
    volumes:
      - ./ads/docs:/usr/share/nginx/html/doc
    environment:
      API_URL: "doc/openapi.yml"
    ports:
      - "7001:8080"

  funds_prisma_migration:
    image: docker.io/damienbernard42/gomicroservices_funds_prisma_migrations
    build:
      context: funds
      dockerfile: build/Dockerfile
      target: builder
    command: "go run github.com/prisma/prisma-client-go db push --schema infra/database/schema.prisma --skip-generate"
    depends_on:
      - postgres_db
    environment:
      DATABASE_URL: ${FUNDS_POSTGRES_URL}
    networks:
      - postgres_db

  funds:
    container_name: funds_service
    depends_on:
      - postgres_db
      - funds_prisma_migration
    build:
      context: funds
      dockerfile: build/Dockerfile
      target: runner
    volumes:
      - funds_go-modules:/go
    restart: always
    environment:
      DATABASE_URL: "${FUNDS_POSTGRES_URL}"
      AUTHORIZED_KEYS: "${API_KEY}"
      CONF_PATH: "${FUNDS_CONF_PATH}"
    ports:
      - "7502:7502"
    networks:
      - account
      - funds
      - postgres_db

  chats:
    image: docker.io/damienbernard42/gomicroservices_chats
    container_name: chats_service
    build:
      context: chats
      dockerfile: build/Dockerfile
      target: runner
    volumes:
      - chats_go-modules:/go
    restart: always
    environment:
      CONF_PATH: "${CHATS_CONF_PATH}"
      LOGS_DIR: "/logs"
      DEBUG_MODE: ${DEBUG_MODE}
    ports:
      - "7569:7569"
      - "7420:7420"
    networks:
      - chats
      - account

  auth:
    image: docker.io/damienbernard42/gomicroservices_authentification
    container_name: authentification_service
    build:
      context: authentification
      dockerfile: build/Dockerfile
      target: runner
    volumes:
      - authentification_go-modules:/go
    restart: always
    environment:
      MONGO_DB: "${AUTH_MONGO_DB}"
      USER: "${AUTH_USER}"
      PASSWORD: "${AUTH_PASSWORD}"
      MONGO_COLLECTION: "${AUTH_MONGO_COLLECTION}"
      PORT: "${AUTH_PORT}"
      MONGO_URI: "${AUTH_MONGO_URI}"
    expose:
      - ${AUTH_PORT}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    networks:
      - auth


networks:
  postgres_db:
    driver: bridge
  auth:
    driver: bridge
  account:
    driver: bridge
  ads:
    driver: bridge
  funds:
    driver: bridge
  chats:
    driver: bridge

volumes:
  account_go-modules: {}
  ads_go-modules: {}
  funds_go-modules: {}
  chats_go-modules: {}
  authentification_go-modules: {}
